/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$dummypixel-name: 'dummypixel';
$dummypixel-x: 180px;
$dummypixel-y: 180px;
$dummypixel-offset-x: -180px;
$dummypixel-offset-y: -180px;
$dummypixel-width: 1px;
$dummypixel-height: 1px;
$dummypixel-total-width: 270px;
$dummypixel-total-height: 270px;
$dummypixel-image: '../images/sprite.png';
$dummypixel: (180px, 180px, -180px, -180px, 1px, 1px, 270px, 270px, '../images/sprite.png', 'dummypixel', );
$tool-bower-name: 'tool-bower';
$tool-bower-x: 0px;
$tool-bower-y: 0px;
$tool-bower-offset-x: 0px;
$tool-bower-offset-y: 0px;
$tool-bower-width: 90px;
$tool-bower-height: 90px;
$tool-bower-total-width: 270px;
$tool-bower-total-height: 270px;
$tool-bower-image: '../images/sprite.png';
$tool-bower: (0px, 0px, 0px, 0px, 90px, 90px, 270px, 270px, '../images/sprite.png', 'tool-bower', );
$tool-foundation-name: 'tool-foundation';
$tool-foundation-x: 90px;
$tool-foundation-y: 0px;
$tool-foundation-offset-x: -90px;
$tool-foundation-offset-y: 0px;
$tool-foundation-width: 90px;
$tool-foundation-height: 90px;
$tool-foundation-total-width: 270px;
$tool-foundation-total-height: 270px;
$tool-foundation-image: '../images/sprite.png';
$tool-foundation: (90px, 0px, -90px, 0px, 90px, 90px, 270px, 270px, '../images/sprite.png', 'tool-foundation', );
$tool-git-name: 'tool-git';
$tool-git-x: 0px;
$tool-git-y: 90px;
$tool-git-offset-x: 0px;
$tool-git-offset-y: -90px;
$tool-git-width: 90px;
$tool-git-height: 90px;
$tool-git-total-width: 270px;
$tool-git-total-height: 270px;
$tool-git-image: '../images/sprite.png';
$tool-git: (0px, 90px, 0px, -90px, 90px, 90px, 270px, 270px, '../images/sprite.png', 'tool-git', );
$tool-gulp-name: 'tool-gulp';
$tool-gulp-x: 90px;
$tool-gulp-y: 90px;
$tool-gulp-offset-x: -90px;
$tool-gulp-offset-y: -90px;
$tool-gulp-width: 90px;
$tool-gulp-height: 90px;
$tool-gulp-total-width: 270px;
$tool-gulp-total-height: 270px;
$tool-gulp-image: '../images/sprite.png';
$tool-gulp: (90px, 90px, -90px, -90px, 90px, 90px, 270px, 270px, '../images/sprite.png', 'tool-gulp', );
$tool-jquery-name: 'tool-jquery';
$tool-jquery-x: 180px;
$tool-jquery-y: 0px;
$tool-jquery-offset-x: -180px;
$tool-jquery-offset-y: 0px;
$tool-jquery-width: 90px;
$tool-jquery-height: 90px;
$tool-jquery-total-width: 270px;
$tool-jquery-total-height: 270px;
$tool-jquery-image: '../images/sprite.png';
$tool-jquery: (180px, 0px, -180px, 0px, 90px, 90px, 270px, 270px, '../images/sprite.png', 'tool-jquery', );
$tool-sass-name: 'tool-sass';
$tool-sass-x: 180px;
$tool-sass-y: 90px;
$tool-sass-offset-x: -180px;
$tool-sass-offset-y: -90px;
$tool-sass-width: 90px;
$tool-sass-height: 90px;
$tool-sass-total-width: 270px;
$tool-sass-total-height: 270px;
$tool-sass-image: '../images/sprite.png';
$tool-sass: (180px, 90px, -180px, -90px, 90px, 90px, 270px, 270px, '../images/sprite.png', 'tool-sass', );
$tool-sublime-name: 'tool-sublime';
$tool-sublime-x: 0px;
$tool-sublime-y: 180px;
$tool-sublime-offset-x: 0px;
$tool-sublime-offset-y: -180px;
$tool-sublime-width: 90px;
$tool-sublime-height: 90px;
$tool-sublime-total-width: 270px;
$tool-sublime-total-height: 270px;
$tool-sublime-image: '../images/sprite.png';
$tool-sublime: (0px, 180px, 0px, -180px, 90px, 90px, 270px, 270px, '../images/sprite.png', 'tool-sublime', );
$tool-wp-name: 'tool-wp';
$tool-wp-x: 90px;
$tool-wp-y: 180px;
$tool-wp-offset-x: -90px;
$tool-wp-offset-y: -180px;
$tool-wp-width: 90px;
$tool-wp-height: 90px;
$tool-wp-total-width: 270px;
$tool-wp-total-height: 270px;
$tool-wp-image: '../images/sprite.png';
$tool-wp: (90px, 180px, -90px, -180px, 90px, 90px, 270px, 270px, '../images/sprite.png', 'tool-wp', );
$spritesheet-width: 270px;
$spritesheet-height: 270px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($dummypixel, $tool-bower, $tool-foundation, $tool-git, $tool-gulp, $tool-jquery, $tool-sass, $tool-sublime, $tool-wp, );
$spritesheet: (270px, 270px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
